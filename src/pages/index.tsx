import Head from "next/head";
import Image from "next/image";

import styles from "@/styles/Home.module.css";
import { useRouter } from "next/router";
import fonts from "@/styles/font.module.css";
import { useTranslation } from "next-i18next";
import { serverSideTranslations } from "next-i18next/serverSideTranslations";
import type { GetStaticProps, InferGetStaticPropsType } from "next";
import LanguageSwitcher from "@/components/LanguageSwitcher";
import { useSession } from "next-auth/react";
import { useEffect, useRef, useState } from "react";
import Typewriter, { TyperRef } from "@/components/Typer";
import { Root } from "hast";
import { MarkdowntoReact, split } from "@/MarkdownProcessor";
type Props = {
  // Add custom props here
};
export const getStaticProps: GetStaticProps<Props> = async ({ locale }) => ({
  props: {
    ...(await serverSideTranslations(locale ?? "en-US", ["common"])),
  },
});
export default function Home(
  _props: InferGetStaticPropsType<typeof getStaticProps>
) {
  const [opacity, setOpacity] = useState("");
  const router = useRouter();
  const [firstShow, setfirstShow] = useState(router.query.firstShow ?? false);
  const { t } = useTranslation("common");
  const changeTo = router.locale === "en-US" ? "zh-CN" : "en-US";
  const fontCls = changeTo !== "en-US" ? fonts.enRegular : fonts.cnRegular;
  const fontHeavyCls = changeTo !== "en-US" ? fonts.enHeavy : fonts.cnHeavy;
  const { data: session, status } = useSession();
  const [username, setusername] = useState<string>("");
  const flag = username !== "";
  const [hidden, setHidden] = useState(false);

  const welcomeword =
    "Hi&nbsp;<strong>" +
    username +
    "</strong> , this is ChatPDF <br /> Welcome!";
  useEffect(() => {
    setusername(session?.user?.name ?? "");
  });

  const callBackFunc = () => {
    setHidden(true);
  };
  const setDisplay = () => {
    console.log("ininin");
    setOpacity("hidden");
  };
  const writerRef = useRef<HTMLDivElement>(null);
  //const root = await MarkdowntoReact(welcomeword);
  const oneTimeArr = split(welcomeword);
  const fadeCls = hidden ? "fade-out hiddenin" : "fade-out";
  return (
    <>
      <Head>
        <title>ChatPDF</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={styles.description}>
          {firstShow && flag && (
            <div
              ref={writerRef}
              className={
                fadeCls +
                " " +
                opacity +
                " transition-all flex bg-white items-center justify-center fixed inset-0 px-2 py-2 radius-md z-50"
              }
              style={{ fontSize: 75 }}
              onTransitionEnd={() => setDisplay()}
            >
              <Typewriter content={oneTimeArr} callback={callBackFunc} />
            </div>
          )}
          <LanguageSwitcher float="" narrow="" />

          {flag && (
            <div
              className={
                fontHeavyCls + " text-lg bg-white/50 px-4 py-2 rounded-lg"
              }
            >
              {"Hi, " + username}
            </div>
          )}
          {!flag && (
            <div>
              <a href="#" target="_blank" rel="noopener noreferrer">
                Powered By{" "}
                <Image
                  src="/OpenAI_Logo.svg"
                  alt="OpenAI Logo"
                  className={styles.vercelLogo}
                  width={100}
                  height={24.6}
                  priority
                />
              </a>
            </div>
          )}
        </div>

        <div className={styles.center}>
          <div className="flex flex-col">
            <div className="flex">
              <div
                className={fonts.sfUltralight + " " + styles.title}
                style={{ fontSize: "4rem", zIndex: 1 }}
              >
                ChatPDF
              </div>
              <div
                className={styles.thirteen + " " + fontCls}
                style={{ fontSize: "2rem" }}
              >
                3.5
              </div>
            </div>

            {flag && (
              <div className="flex justify-center mt-2">
                <span className="mr-2">Powered By </span>
                <Image
                  src="/OpenAI_Logo.svg"
                  alt="OpenAI Logo"
                  className={styles.vercelLogo}
                  width={100}
                  height={24.6}
                  priority
                />
              </div>
            )}
          </div>
        </div>

        <div className={styles.grid}>
          <a
            href={t("ChatsLink")!}
            className={styles.card}
            target="_blank"
            rel="noopener noreferrer"
          >
            <h2 className={fontHeavyCls}>
              {t("Chats")} <span>-&gt;</span>
            </h2>
            <p className={fontCls}>{t("ChatsDesc")}</p>
          </a>

          <a
            href={t("ChatsFileLink")!}
            className={styles.card}
            target="_blank"
            rel="noopener noreferrer"
          >
            <h2 className={fontHeavyCls}>
              {t("AskPdf")} <span>-&gt;</span>
            </h2>
            <p className={fontCls}>{t("AskPdfDesc")}</p>
          </a>

          <a
            href="#"
            className={styles.card}
            target="_blank"
            rel="noopener noreferrer"
          >
            <h2 className={fontHeavyCls}>
              {t("ReportPDF")} <span>-&gt;</span>
            </h2>
            <p className={fontCls}>{t("ReportPDFDesc")}</p>
          </a>
        </div>
      </main>
    </>
  );
}
